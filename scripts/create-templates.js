import PDFDocument from 'pdfkit';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const templatesDir = path.join(__dirname, '..', 'public', 'templates');

// Create templates directory if it doesn't exist
if (!fs.existsSync(templatesDir)) {
  fs.mkdirSync(templatesDir, { recursive: true });
}

const createTemplate = (filename, title, fields) => {
  const doc = new PDFDocument();
  const stream = fs.createWriteStream(path.join(templatesDir, filename));
  doc.pipe(stream);

  // Add header
  doc.fontSize(24)
     .text(title, { align: 'center' });
  
  doc.moveDown();
  doc.fontSize(12)
     .text('Template for Export Documentation', { align: 'center' });

  doc.moveDown();
  doc.moveDown();

  // Add fields
  fields.forEach(field => {
    doc.fontSize(12)
       .text(field + ': _________________________________');
    doc.moveDown();
  });

  // Add footer
  doc.fontSize(10)
     .text('Generated by SMB Global E-Commerce Platform', {
       align: 'center',
       bottom: 30
     });

  doc.end();
  return new Promise((resolve) => stream.on('finish', resolve));
};

const templates = [
  {
    filename: 'commercial-invoice.pdf',
    title: 'Commercial Invoice',
    fields: [
      'Invoice Number',
      'Date',
      'Seller Information',
      'Buyer Information',
      'Description of Goods',
      'Quantity',
      'Unit Price',
      'Total Amount',
      'Currency',
      'Terms of Payment',
      'Shipping Terms'
    ]
  },
  {
    filename: 'bill-of-lading.pdf',
    title: 'Bill of Lading',
    fields: [
      'Shipper/Exporter',
      'Booking Number',
      'Consignee',
      'Vessel',
      'Port of Loading',
      'Port of Discharge',
      'Marks and Numbers',
      'Number of Packages',
      'Description of Goods',
      'Gross Weight',
      'Measurement'
    ]
  },
  {
    filename: 'packing-list.pdf',
    title: 'Packing List',
    fields: [
      'Shipper',
      'Consignee',
      'Invoice Number',
      'Date',
      'Package Number',
      'Type of Package',
      'Description of Goods',
      'Quantity',
      'Net Weight',
      'Gross Weight',
      'Dimensions'
    ]
  },
  {
    filename: 'certificate-origin.pdf',
    title: 'Certificate of Origin',
    fields: [
      'Exporter',
      'Consignee',
      'Country of Origin',
      'Transport Details',
      'Marks and Numbers',
      'Number and Kind of Packages',
      'Description of Goods',
      'Origin Criterion',
      'Gross Weight',
      'Invoice Number and Date'
    ]
  },
  {
    filename: 'shipping-bill.pdf',
    title: 'Shipping Bill',
    fields: [
      'Exporter',
      'IEC Number',
      'Consignee',
      'Port of Loading',
      'Country of Destination',
      'Nature of Cargo',
      'Items Description',
      'Quantity',
      'Value',
      'Exchange Rate',
      'Export Duty'
    ]
  },
  {
    filename: 'insurance.pdf',
    title: 'Insurance Certificate',
    fields: [
      'Certificate Number',
      'Insured Name',
      'Beneficiary',
      'Description of Goods',
      'Sum Insured',
      'Premium Amount',
      'Voyage From/To',
      'Vessel Name',
      'Coverage Details',
      'Terms and Conditions'
    ]
  }
];

async function createAllTemplates() {
  for (const template of templates) {
    console.log(`Creating ${template.filename}...`);
    await createTemplate(template.filename, template.title, template.fields);
  }
  console.log('All templates created successfully!');
}

createAllTemplates().catch(console.error);
